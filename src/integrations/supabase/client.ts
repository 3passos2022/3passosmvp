
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { ENV } from '@/env';
import Cookies from 'js-cookie';

// Obtém as variáveis de ambiente
const supabaseUrl = ENV.SUPABASE_URL;
const supabaseAnonKey = ENV.SUPABASE_ANON_KEY;

// Verifica se as variáveis de ambiente estão definidas
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Variáveis de ambiente do Supabase não encontradas');
}

// Cookie storage implementation for Supabase
const cookieStorage = {
  getItem: (key: string) => {
    const value = Cookies.get(key);
    return value || null;
  },
  setItem: (key: string, value: string) => {
    // Set secure cookies with max age of 7 days, HTTP only where possible
    Cookies.set(key, value, { 
      expires: 7, 
      secure: window.location.protocol === 'https:',
      sameSite: 'Lax'
    });
  },
  removeItem: (key: string) => {
    Cookies.remove(key);
  }
};

export const supabase = createClient<Database>(
  supabaseUrl,
  supabaseAnonKey,
  {
    auth: {
      persistSession: true,
      storageKey: '3passos-auth',
      storage: typeof window !== 'undefined' ? cookieStorage : undefined,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'pkce',
    },
    global: {
      headers: {
        'x-application-name': '3passos',
        'x-frame-options': 'DENY',
        'x-content-type-options': 'nosniff',
        'strict-transport-security': 'max-age=31536000; includeSubDomains',
        'x-xss-protection': '1; mode=block'
      }
    },
    db: {
      schema: 'public'
    }
  }
);

// Set site URL for Supabase redirects
if (typeof window !== 'undefined') {
  // Try to get existing session from cookies
  const existingTokenCookie = cookieStorage.getItem('sb-jezfwtknzraaykkjjaaf-auth-token');
  const existingRefreshTokenCookie = cookieStorage.getItem('sb-jezfwtknzraaykkjjaaf-auth-refresh-token');
  
  if (existingTokenCookie && existingRefreshTokenCookie) {
    try {
      const parsedToken = JSON.parse(existingTokenCookie);
      const parsedRefreshToken = JSON.parse(existingRefreshTokenCookie);
      
      // Use setSession in newer versions of Supabase instead of setAuth
      supabase.auth.setSession({
        access_token: parsedToken,
        refresh_token: parsedRefreshToken,
      }).catch(err => {
        if (typeof window !== 'undefined') {
          console.error('Error setting session:', err);
        }
      });
    } catch (error) {
      if (typeof window !== 'undefined') {
        console.error('Error parsing stored tokens:', error);
      }
    }
  }
}
